#!/bin/bash
#
#                         License
#
# Copyright (C) 2021  David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# This script automates the execution of coremark.  It will determine the
# set of default run parameters based on the system configuration.
#

coremark_version="v1.01"
test_name="coremark"
arguments="$@"
chars=`echo $0 | awk -v RS='/' 'END{print NR-1}'`
run_dir=`echo $0 | cut -d'/' -f 1-${chars}`
cd $run_dir

setup_done=0
out_file=""
show_usage=0
cpu_add=0
powers_2=0

usage()
{
	echo "Usage $1:"
	echo "  --cpu_add <n>: starting at cpu count of 1, add this number of cpus to each run"
	echo "  --powers_2s: starting at 1, run the number of cpus by powers of 2's"
	source test_tools/general_setup --usage
	exit
}

install_test_tools()
{
	#
	# Clone the repo that contains the common code and tools
	#
	tools_git=https://github.com/dvalinrh/test_tools

	found=0
	for arg in "$@"; do
		if [ $found -eq 1 ]; then
			tools_git=$arg
			found=0
		fi
		if [[ $arg == "--tools_git" ]]; then
			found=1
		fi

		#
		# We do the usage check here, as we do not want to be calling
		# the common parsers then checking for usage here.  Doing so will
		# result in the script exiting with out giving the test options.
		#
		if [[ $arg == "--usage" ]]; then
			show_usage=1
		fi
	done

	#
	# Check to see if the test tools directory exists.  If it does, we do not need to
	# clone the repo.
	#
	if [ ! -d "test_tools" ]; then
		git clone $tools_git
		if [ $? -ne 0 ]; then
			echo pulling git $tools_git failed.
			exit
		fi
	fi
	if [ $show_usage -eq 1 ]; then
		usage $1
	fi
}

execute_coremark()
{
	touch *.c
	touch */*.c
	make XCFLAGS="-DMULTITHREAD=${2} -DUSE_PTHREAD -pthread"
	#
	# Move results
	#
	mv run1.log run1_iter=${1}_threads=${2}.log
	mv run2.log run2_iter=${1}_threads=${2}.log
}

run_coremark()
{
	#
	# Iteration of test.
	#
	for iter in $(seq 1 1 $to_times_to_run); do
		if [ $powers_2 -eq 1 ]; then
			cpu_count=1
			while  [ $cpu_count -lt $numb_cpus ]; do
				execute_coremark $iter $cpu_count
				let "cpu_count=$cpu_count*2"
			done
			execute_coremark $iter $numb_cpus
			continue;
		fi
		if [ $cpu_add -ne  0 ]; then
			cpu_count=1
			while  [ $cpu_count -lt $numb_cpus ]; do
				execute_coremark $iter $cpu_count
				let "cpu_count=${cpu_count}+${cpu_add}"
			done
			execute_coremark $iter $numb_cpus
			continue;
		fi
		#
		# Just the single case.
		#
		execute_coremark $iter $numb_cpus
	done

	#
	# Create the csv file.
	#
	csv_file=`mktemp /tmp/coremark_csv.XXXXX`
	for i in  `ls run*log`; do
		iteration=`echo $i | cut -d'=' -f2 | cut -d'_' -f1`
		threads=`echo $i | cut -d'=' -f3 | cut -d'.' -f1`
		test_iters=`grep "Iterations/" $i | cut -d':' -f2 | sed "s/ //g"`
		echo ${iteration}:${threads}:${test_iters} >> $csv_file
	done
	echo "iteration:threads:test passes" > coremark_results.csv
	sort -n $csv_file >> coremark_results.csv
}

produce_report()
{
	total_ticks=0
	total_time=0
	iterations=0
	coremark=0
	instances=0

	for file in `ls ${1}*`; do
		let "instances=${instances}+1"
		while IFS= read -r line
		do
			if [[ $line == "Total ticks"* ]]; then
				value=`echo $line | cut -d':' -f2 | sed "s/ //g"`
				total_ticks=`echo ${total_ticks}+${value} | bc`
				continue
			fi
			if [[ $line == "Total time"* ]]; then
				value=`echo $line | cut -d':' -f2 | sed "s/ //g"`
				total_time=`echo ${total_time}+${value} | bc`
				continue
			fi
			if [[ $line == "Iterations/sec"* ]]; then
				value=`echo $line | cut -d':' -f2 | sed "s/ //g"`
				iterations=`echo ${iterations}+${value} | bc`
				continue
			fi
			if [[ $line == "CoreMark 1.0"* ]]; then
				value=`echo $line | cut -d' ' -f 4`
				coremark=`echo ${coremark}+${value} | bc`
				continue
			fi
		done < "${file}"
	done

	#
	# Now produce the coremark summary file
	#
	in_file=`ls ${1}_iter=1_*log`
	while IFS= read -r line
	do
		if [[ $line == "Total ticks"* ]]; then
			value=`echo ${total_ticks}/${instances} | bc`
			echo "Total ticks      : ${value}" >> ${1}_summary
			continue
		fi
		echo $line >> ${1}_summary
	done < "${in_file}"
}

generate_results()
{
	rm run1_summary run2_summary
	if [ $powers_2 -eq 0 ] && [ $cpu_add -eq 0 ]; then
		produce_report run1
		produce_report run2
	else
		echo Summnary not supported yet when doing cpu counts > run1_summary
		echo Summnary not supported yet when doing cpu counts > run2_summary
	fi

	if [ $to_pbench -eq 0 ]; then
		rm -rf /tmp/results_${test_name}_*
		RESULTSDIR=/tmp/results_${test_name}_${to_tuned_setting}_$(date "+%Y.%m.%d-%H.%M.%S")
		mkdir $RESULTSDIR
		cp coremark_results.csv $RESULTSDIR
		cp *_summary $RESULTSDIR
		cp run*log $RESULTSDIR
		echo $coremark_version > $RESULTSDIR/coremark_version
		pushd /tmp > /dev/null
		ln -s ${RESULTSDIR} results_${test_name}_${to_tuned_setting}
		mv  ${test_name}_*.out ${RESULTSDIR}
		tar hcf results_${test_name}_${to_tuned_setting}.tar results_${test_name}_${to_tuned_setting}
		cp  results_${test_name}_${to_tuned_setting}.tar results_pbench_${test_name}_${to_tuned_setting}.tar
		popd > /dev/null
	else
		source ~/.bashrc
		echo $TOOLS_BIN/execute_pbench --cmd_executing "$0" $arguments --test ${test_name} --spacing 11
		$TOOLS_BIN/execute_pbench --cmd_executing "$0" $arguments --test ${test_name} --spacing 11
	fi
	popd > /dev/null
	rm $csv_file
}


install_test_tools

#
# Variables set by general setup.
#
# TOOLS_BIN: points to the tool directory
# to_home_root: home directory
# to_configuration: configuration information
# to_times_to_run: number of times to run the test
# to_pbench: Run the test via pbench
# to_pbench_copy: Copy the data to the pbench repository, not move_it.
# to_puser: User running pbench
# to_run_label: Label for the run
# to_user: User on the test system running the test
# to_sys_type: for results info, basically aws, azure or local
# to_sysname: name of the system
# to_tuned_setting: tuned setting
#

source test_tools/general_setup "$@"

ARGUMENT_LIST=(
	"cpu_add"
)

NO_ARGUMENTS=(
	"powers_2"
	"usage"
)

# read arguments
opts=$(getopt \
	--longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")" \
	--longoptions "$(printf "%s," "${NO_ARGUMENTS[@]}")" \
	--name "$(basename "$0")" \
	--options "h" \
	-- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
	case "$1" in
		--cpu_add)
			echo cpu_add $2
			cpu_add=$2
			shift 2
		;;
		--powers_2)
			powers_2=1
			shift 1
		;;
		--usage)
			usage $0
		;;
		-h)
			usage $0
		;;
		--)
			break
		;;
		*)
			echo option not found $1
			usage $0
		;;
	esac
done

if [ $powers_2 -ne 0 ] && [ $cpu_add -ne 0 ]; then
	echo Error, can not designate both cpu_add and powers_2
	exit 1
fi

cd /${to_home_root}/${to_user}
if [ ! -d "coremark" ]; then
	git clone --depth 1 --branch ${coremark_version} https://github.com/eembc/coremark
fi
numb_cpus=`cat /proc/cpuinfo | grep processor | wc -l`
pushd coremark > /dev/null

run_coremark

generate_results

